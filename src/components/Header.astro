---
import { Icon } from 'astro-icon/components';
import Button from './Button.astro';
import ChangeLanguage from './ChangeLanguage.astro';

type Translations = typeof import('../i18n/en').default;
type HeaderContent = Translations['header'];
interface Props {
  content?: HeaderContent;
}
const { content } = Astro.props as Props;
const icons = [
  {
    name: 'email',
    href: '',
  },
  {
    name: 'map',
    href: '',
  },
  {
    name: 'instagram',
    href: '',
  },
  {
    name: 'facebook',
    href: '',
  },
];
// Obtener la ruta actual y normalizar el path sin prefijo de idioma
const currentPath = Astro.url.pathname;
const normalized = currentPath.replace(/^\/(en|es)/, '') || '/';
// Detectar el idioma actual ('en' o 'es')
const match = currentPath.match(/^\/(en|es)/);
const lang = match ? match[1] : 'en';
---
<header class="fixed top-0 left-0 right-0 z-50 w-full flex flex-col justify-center items-center transition-top duration-300 ease-in-out"
  id="site-header">
  <div class="w-full bg-main justify-center hidden lg:flex">
    <div class="w-full flex justify-center lg:justify-between items-center max-w-[1154px]">
      <div class="flex items-center gap-[6px]">
        <Icon name={"map"} class={"w-[19px] h-[19px] text-white"}/>
        <p class="text-[16px] font-semibold leading-[52px] text-white">Orlando Florida</p>
      </div>
      <div class="hidden md:flex items-center gap-[22px]">
        <div class="flex items-center gap-[6px]">
          {icons.map(i => (
            <a href={i.href} class="size-[31px] rounded-full flex justify-center items-center">
              <Icon name={i.name} class={"w-5 h-5 text-white"}/>
            </a>
          ))}
        </div>
        <ChangeLanguage/>
      </div>
    </div>
  </div>
  <div class="bg-secondary w-full max-w-screen sm:max-w-[1223px] py-4 lg:min-h-[109px] flex justify-between items-center px-7 lg:px-[48px] relative top-0 lg:top-[23px] rounded-0 lg:rounded-[20px]">
    <img src="/logo-1.svg" alt="Logo de PresureProps" width="169" height="41" class="w-[99px] lg:w-[169px] h-[24px] lg:h-[41px]">
    <div class="absolute lg:relative flex items-center bg-secondary lg:bg-transparent text-white  flex-col justify-center lg:flex-row h-screen lg:h-auto w-[90%] lg:w-auto z-50 lg:z-10 top-0 right-0 py-6 lg:py-0 gap-10 lg:gap-0 transform translate-x-full lg:translate-x-0 transition-transform duration-300 ease-out" id="mobile-menu">
      <img src="/equis.svg" alt="Menu" width="24" height="24" class="lg:hidden block absolute top-6 right-6 cursor-pointer" id="close-btn">
      <nav class="relative flex items-center flex-col lg:flex-row justify-center w-full lg:w-auto gap-0 lg:gap-4">
        {
          content?.nav.map((item, index)=>{
            const isActive = normalized === item.href || (index === 1 && normalized.startsWith('/services'))
            const isServices = index === 1;
            return(
              <div class={`flex flex-col lg:flex-row items-center justify-center gap-[14px] px-0 lg:px-[7px] hover:text-main w-full lg:w-auto py-2 lg:py-0 text-center ${isServices ? 'relative group' : ''} ${isActive ? 'bg-main lg:bg-transparent text-white  lg:text-main' : ''}`} id={`services-${index}`}>
                <a href={`/${lang}${item.href}`}  class={`
                text-[18px] text-center font-semibold leading-[52px] relative transition-colors duration-300
               
                
              `}>
                  {item.label}
                  <span
              class={`
                absolute bottom-0 left-0 h-[2px] bg-main  transition-all duration-300 ease-out
               ${isActive ? 'w-full' : 'w-0 group-hover:w-full'}
              `}
              />
                </a>
                {isServices && (
          <div
            class="
              absolute top-full left-0 mt-1 w-[170px] flex-col items-center bg-white z-40 hidden lg:hidden lg:group-hover:flex opacity-0 group-hover:opacity-0 lg:group-hover:opacity-100 pointer-events-none lg:group-hover:pointer-events-auto transition-all duration-300 ease-out -translate-x-[20%]
            "
          >
            {content.types.map(sub => (
              <div
                class="
                  text-[18px] font-semibold text-secondary 
                  py-1.5 hover:bg-main hover:text-white 
                  transition-colors duration-300 ease-in-out
                  cursor-pointer px-6 w-full text-center
                "
              >
                <a href={`/${lang}/services/${sub.href}`}>{sub.label}</a>
              </div>
            ))}
          </div>
          <div class="flex-col justify-center items-center w-full bg-[#0366FF] divide-y divide-white lg:hidden hidden" id="sub-menu-services">
            {content.types.map(sub => (
                <a href={`/${lang}/services/${sub.href}`} class="
                  text-[18px] font-semibold text-white 
                  py-3 
                  transition-colors duration-300 ease-in-out
                  cursor-pointer px-6 w-full text-center
                ">{sub.label}</a>
            ))}
          </div>
        )}
            </div>
            )
            
          })
        }
      </nav>
      <Button class="bg-main ml-[27.5px] mr-[27px] h-[52px]">
        {content?.button}
      </Button>
      <div class="flex justify-center  items-center gap-4 lg:gap-[6px] px-[7px]">
        <img src="/phone.webp" alt="Telefono Blanco" width="33" height="48" class=" block w-[33px] h-[48px]">
        <div class="text-white text-[16px] font-semibold leading-[24px] flex flex-col items-start justify-center">
          <p>{content?.phone}</p>
          <a href="tel:+14074930858" class="hover:text-main transition-all duration-300 ease-in-out cursor-pointer">+1 (407) 493-0858</a>
        </div>
      </div>
    </div>
    <div class="flex lg:hidden justify-center items-center gap-7">
      <ChangeLanguage/>
      <Icon name={"hamburger"} class={"w-6 h-6 "} id="hamburger-btn"/>
    </div>
  </div>
</header>
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
  const menu = document.getElementById('mobile-menu');
  const openBtn = document.getElementById('hamburger-btn');
  const closeBtn = document.getElementById('close-btn');
  const servicesDiv = document.getElementById('services-1');
  const subMenuServices = document.getElementById('sub-menu-services');
  const body = document.body;

  const isMobile = () => window.innerWidth < 1024;

  function openMenu() {
    if (isMobile()) {
      menu.classList.replace('translate-x-full', 'translate-x-0');
      body.classList.add('overflow-hidden');
    }
  }

  function closeMenu() {
    if (isMobile()) {
      menu.classList.replace('translate-x-0', 'translate-x-full');
      body.classList.remove('overflow-hidden');
    }
  }

  function toggleSubMenu(event) {
    if (isMobile()) {
      const isSubMenuOpen = !subMenuServices.classList.contains('hidden');
      
      // Si el submenu está cerrado, prevenimos la navegación y lo abrimos
      if (!isSubMenuOpen) {
        event.preventDefault();
        subMenuServices.classList.remove('hidden');
        subMenuServices.classList.add('flex');
      }
      // Si el submenu está abierto, permitimos la navegación (no hacemos preventDefault)
      // y cerramos el submenu después de un pequeño delay para permitir la navegación
      else {
        setTimeout(() => {
          subMenuServices.classList.add('hidden');
          subMenuServices.classList.remove('flex');
        }, 100);
      }
    }
  }

  openBtn.addEventListener('click', openMenu);
  closeBtn.addEventListener('click', closeMenu);
  
  // Agregar event listener al enlace dentro del div services-1
  const servicesLink = servicesDiv.querySelector('a');
  if (servicesLink) {
    servicesLink.addEventListener('click', toggleSubMenu);
  }

  // Asegurar estado inicial según tamaño
  if (isMobile()) {
    menu.classList.add('translate-x-full');
    menu.classList.remove('translate-x-0');
    body.classList.remove('overflow-hidden');
    subMenuServices.classList.add('hidden');
    subMenuServices.classList.remove('flex');
  } else {
    menu.classList.add('translate-x-0');
    menu.classList.remove('translate-x-full');
    body.classList.remove('overflow-hidden');
  }

  window.addEventListener('resize', () => {
    if (!isMobile()) {
      menu.classList.add('translate-x-0');
      menu.classList.remove('translate-x-full');
      body.classList.remove('overflow-hidden');
      // Ocultar submenu en desktop
      subMenuServices.classList.add('hidden');
      subMenuServices.classList.remove('flex');
    } else {
      // Asegura que el menú esté oculto al volver a móvil
      menu.classList.add('translate-x-full');
      menu.classList.remove('translate-x-0');
      body.classList.remove('overflow-hidden');
      subMenuServices.classList.add('hidden');
      subMenuServices.classList.remove('flex');
    }
  });
  const header = document.getElementById('site-header');
    let lastScroll = window.pageYOffset;

    window.addEventListener('scroll', () => {
      const currentScroll = window.pageYOffset;

      if (currentScroll > lastScroll && currentScroll > 100) {
        // Scroll hacia abajo: escondemos el header completo
        header.style.transform = 'translateY(-120%)';
      } else {
        // Scroll hacia arriba: lo mostramos
        header.style.transform = 'translateY(0)';
      }

      lastScroll = currentScroll;
    });
});
</script>