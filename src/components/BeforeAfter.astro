---
import { Icon } from 'astro-icon/components';

export interface Props {
  beforeImage: string;
  afterImage: string;
  altBefore?: string;
  altAfter?: string;
  width?: number;
  height?: number;
}

const {
  beforeImage,
  afterImage,
  altBefore = 'Antes',
  altAfter = 'Después',
  width = 550,
  height = 415,
} = Astro.props;

// Generar ID único para cada instancia
const uniqueId = Math.random().toString(36).substr(2, 9);
---
<style>
  .ba-image-wrapper {
    --pos: 50%;
  }
</style> 

<div
  id={`ba-container-${uniqueId}`}
  class="relative mx-auto overflow-hidden select-none rounded-[15px]"
  style={`width: ${width}px; height: ${height}px;`}
>
  <!-- Imagen de fondo: siempre al tamaño natural -->
  <img
    src={beforeImage}
    alt={altBefore}
    class="absolute top-0 left-0"
    style={`width: ${width}px; height: ${height}px;`}
    loading="lazy"
    decoding="async"
  />

  <!-- Imagen "después" a tamaño completo, siempre fija -->
  <img
    src={afterImage}
    alt={altAfter}
    class="absolute top-0 left-0"
    style={`width: ${width}px; height: ${height}px; clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);`}
    loading="lazy"
    decoding="async"
  />

  <!-- Barra divisoria / handler -->
  <div
    id={`ba-handle-${uniqueId}`}
    class="absolute top-0 bottom-0 w-1.5 bg-white"
    style="left: 50%;"
  >
    <div id={`ba-circle-${uniqueId}`} class="w-[35px] h-[35px] rounded-full cursor-pointer flex items-center justify-center bg-white shadow-lg" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
      <Icon name={"arrow"} class={"w-[25px] h-[25px]"}/>
    </div>
  </div>
</div>
<script is:inline define:vars={{ uniqueId }}>
  (function(){
    const container = document.getElementById(`ba-container-${uniqueId}`);
    const handle    = document.getElementById(`ba-handle-${uniqueId}`);
    const circle    = document.getElementById(`ba-circle-${uniqueId}`);
    const afterImg  = container.querySelector('img[alt="Después"]');
    let dragging = false;

    const update = (clientX) => {
      const rect = container.getBoundingClientRect();
      let pct = (clientX - rect.left) / rect.width;
      pct = Math.min(1, Math.max(0, pct));
      const percStr = (pct * 100) + '%';
      
      // Actualizar clip-path de la imagen "después"
      afterImg.style.clipPath = `polygon(0 0, ${percStr} 0, ${percStr} 100%, 0 100%)`;
      handle.style.left = percStr;
    };

    // Start dragging SOLO cuando presionas sobre el círculo
    circle.addEventListener('mousedown', (e) => {
      e.preventDefault();
      dragging = true;
      circle.style.cursor = 'grabbing';
    });
    
    circle.addEventListener('touchstart', (e) => {
      e.preventDefault();
      dragging = true;
    });

    // Siempre que sueltes el ratón/touch en cualquier parte, paramos el drag
    window.addEventListener('mouseup', () => {
      dragging = false;
      circle.style.cursor = 'grab';
    });
    
    window.addEventListener('touchend', () => {
      dragging = false;
    });

    // Movimiento del ratón - solo si estamos arrastrando
    window.addEventListener('mousemove', (e) => {
      if (dragging) {
        e.preventDefault();
        update(e.clientX);
      }
    });

    // Movimiento táctil - solo si estamos arrastrando
    window.addEventListener('touchmove', (e) => {
      if (dragging) {
        e.preventDefault();
        update(e.touches[0].clientX);
      }
    });
  })();
</script>