<div id='chatbot-placeholder' aria-hidden='true'></div>

<script is:inline>
  // Configuración ultra-optimizada para PageSpeed Insights
  const WIDGET_CONFIG = {
    src: "https://widgets.leadconnectorhq.com/loader.js",
    resource: "https://widgets.leadconnectorhq.com/chat-widget/loader.js",
    id: "689ba71a0ec7aebbbf1e1e0b",
    breakpoint: 640,
    scrollThreshold: 100
  };

  let loaded = false;

  // Función optimizada para cargar el widget solo cuando sea necesario
  function loadWidget() {
    if (loaded) return;
    
    // Usar requestIdleCallback para no bloquear el hilo principal
    const load = () => {
      const script = document.createElement('script');
      script.src = WIDGET_CONFIG.src;
      script.setAttribute('data-resources-url', WIDGET_CONFIG.resource);
      script.setAttribute('data-widget-id', WIDGET_CONFIG.id);
      script.async = true;
      script.defer = true;
      document.head.appendChild(script);
      loaded = true;
    };

    if ('requestIdleCallback' in window) {
      requestIdleCallback(load, { timeout: 2000 });
    } else {
      setTimeout(load, 100);
    }
  }

  // Verificar si debe mostrarse el chatbot
  function shouldShowWidget() {
    const isMobile = window.innerWidth < WIDGET_CONFIG.breakpoint;
    const hasScrolled = window.scrollY > WIDGET_CONFIG.scrollThreshold;
    return isMobile ? hasScrolled : true;
  }

  // Listener optimizado con throttling mínimo
  let scrollTimer = null;
  function onScroll() {
    if (scrollTimer) return;
    
    scrollTimer = setTimeout(() => {
      if (shouldShowWidget()) {
        loadWidget();
        // Remover listener después de cargar para optimizar
        window.removeEventListener('scroll', onScroll);
        window.removeEventListener('resize', onScroll);
      }
      scrollTimer = null;
    }, 150);
  }

  // Inicialización solo en cliente y cuando el DOM esté listo
  if (typeof window !== 'undefined') {
    const init = () => {
      // Verificación inicial
      if (shouldShowWidget()) {
        loadWidget();
      } else {
        // Solo agregar listeners si no se debe mostrar inmediatamente
        window.addEventListener('scroll', onScroll, { passive: true });
        window.addEventListener('resize', onScroll, { passive: true });
      }
    };

    // Usar DOMContentLoaded para evitar bloqueos
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  }
</script>