---
interface Props {
  interval?: number;
}

const { interval = 8000 } = Astro.props as Props;
---

<div class="relative px-2 sm:px-5 lg:px-0 mx-auto max-w-[1080px] max-h-[255px] w-auto" data-interval={interval}>
  <!-- Prev arrow -->
  <button
    class="hidden md:flex absolute top-1/2 left-0 -translate-y-1/2 -translate-x-[40%] lg:-translate-x-full z-10 w-10 h-10 items-center justify-center text-[40px] text-secondary cursor-pointer review-prev"
    id="carousel-prev"
    aria-label="Previous slide"
  >
    ‹
  </button>

  <!-- Viewport -->
  <div class="overflow-hidden w-auto h-full">
    <div class="flex transition-transform duration-800 ease-in-out review-track h-full" id="carousel-track">
      {Array.from({ length: 4 }, (_, i) => (
        <div class="flex-shrink-0 w-full md:w-1/2 lg:w-1/3 h-full px-2 md:px-[10px]">
          <img
            src={`/main/item-0${i + 1}.png`}
            alt="Slide image"
            width="400"
            height="255"
            class="w-full h-full object-cover rounded-[15px]"
            loading="eager"
            decoding="async"
          />
        </div>
      ))}
    </div>
  </div>

  <!-- Next arrow -->
  <button
    class="hidden md:flex absolute top-1/2 right-0 -translate-y-1/2 translate-x-[40%] lg:translate-x-full z-10 w-10 h-10 items-center justify-center text-[40px] text-secondary cursor-pointer review-next"
    id="carousel-next"
    aria-label="Next slide"
  >
    ›
  </button>

  <!-- Mobile indicators -->
  <div class="flex md:hidden gap-4 justify-center mt-4 review-indicators" id="carousel-indicators">
    {Array.from({ length: 4 }, (_, i) => (
      <button
        class="w-2 h-2 rounded-full bg-[#D9D9D9]"
        data-index={i}
        id={`indicator-${i}`}
        aria-label={`Go to slide ${i + 1}`}
      />
    ))}
  </div>
</div>

<script is:inline defer>
  window.addEventListener("load", () => {
    const carousel = document.querySelector("[data-interval]");
    if (!carousel) return;

    const track = document.getElementById("carousel-track");
    const prevBtn = document.getElementById("carousel-prev");
    const nextBtn = document.getElementById("carousel-next");
    const indicators = [...document.querySelectorAll("#carousel-indicators button")];
    const intervalMs = parseInt(carousel.dataset.interval || "8000", 10);

    // Slides originales y clones
    let slides = [...track.children];
    const originalSlides = [...slides];
    originalSlides.forEach(s => track.append(s.cloneNode(true)));
    [...originalSlides].reverse().forEach(s => track.prepend(s.cloneNode(true)));
    slides = [...track.children];

    const originalCount = originalSlides.length;
    let currentIndex = originalCount;
    let isTransitioning = false, autoSlide, startX = 0, deltaX = 0;

    const getSlideWidth = () => slides[0].getBoundingClientRect().width;
    const goTo = (i, smooth = true) => {
      if (isTransitioning && smooth) return;
      track.style.transition = smooth ? "transform .5s ease-in-out" : "none";
      track.style.transform = `translateX(-${getSlideWidth() * i}px)`;
      currentIndex = i; isTransitioning = smooth;
    };
    const updateIndicators = () => {
      let realIndex = (currentIndex - originalCount) % originalCount;
      if (realIndex < 0) realIndex += originalCount;
      indicators.forEach((btn,i)=>btn.classList.toggle("bg-main", i===realIndex));
    };

    track.addEventListener("transitionend", () => {
      if (currentIndex >= slides.length - originalCount) goTo(originalCount,false);
      if (currentIndex < originalCount) goTo(slides.length-originalCount-1,false);
      isTransitioning=false; updateIndicators();
    });

    prevBtn?.addEventListener("click", () => { goTo(currentIndex-1); resetAuto(); });
    nextBtn?.addEventListener("click", () => { goTo(currentIndex+1); resetAuto(); });
    indicators.forEach(btn =>
      btn.addEventListener("click", () => { goTo(originalCount+Number(btn.dataset.index)); resetAuto(); })
    );

    // Auto-slide optimizado con rAF
    let lastTime=0;
    const loopAuto = t => {
      if (!lastTime) lastTime=t;
      if (t-lastTime >= intervalMs && !isTransitioning) {
        goTo(currentIndex+1); lastTime=t;
      }
      autoSlide=requestAnimationFrame(loopAuto);
    };
    const startAuto=()=>{stopAuto();autoSlide=requestAnimationFrame(loopAuto);}
    const stopAuto=()=>{if(autoSlide)cancelAnimationFrame(autoSlide);}
    const resetAuto=()=>{stopAuto();setTimeout(startAuto,100);};

    carousel.addEventListener("mouseenter", stopAuto);
    carousel.addEventListener("mouseleave", startAuto);

    // Swipe touch
    track.addEventListener("touchstart", e => { startX=e.touches[0].clientX; stopAuto(); }, {passive:true});
    track.addEventListener("touchend", e => {
      deltaX=e.changedTouches[0].clientX-startX;
      if (Math.abs(deltaX)>50) goTo(currentIndex+(deltaX<0?1:-1));
      resetAuto();
    }, {passive:true});

    // Init + resize
    const init=()=>{slides=[...track.children];goTo(originalCount,false);updateIndicators();};
    window.addEventListener("resize",()=>setTimeout(()=>goTo(currentIndex,false),100));

    init(); startAuto();
  });
</script>
