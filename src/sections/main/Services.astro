---
type Translations = typeof import('../../i18n/es').default;
type ServicesContent = Translations['main']['services'];
interface Props {
  content: ServicesContent;
}
const { content } = Astro.props as Props;
const currentPath = Astro.url.pathname;
// Detectar el idioma actual ('en' o 'es')
const match = currentPath.match(/^\/(en|es)/);
const lang = match ? match[1] : 'en';
---
<section class="w-full pt-[60px] pb-[60px] md:pb-[86px] md:pt-[65px] mx-auto relative overflow-hidden">
  <img src="/main/bg-service.webp" alt="Fondo de soluciones" width="4096" height="2730" class="absolute inset-0 w-full h-full object-cover -z-30 " loading="lazy" decoding="async">
  <div class="flex flex-col justify-center items-center gap-[22px] md:gap-[65px] max-w-screen lg:max-w-[1140px] mx-auto px-4 lg:px-0">
    <h2 set:html={content.title} class="text-center text-[28px] md:text-[32px] lg:text-[48px] font-semibold leading-[32px] md:leading-[46px] text-white max-w-[350px] md:max-w-[750px]"></h2>
    <div class="w-full min-h-none lg:min-h-[489px] rounded-[15px] flex flex-col lg:flex-row" data-aos="fade-up" data-aos-offset="100" id="hover‑container">
      {content.items.map((item, index) => (
        <a 
          href={`/${lang}/services/${item.href}`} 
          id={`col${index + 1}`}
          class={`group flex flex-col justify-center lg:justify-start items-center relative overflow-hidden h-[127px] lg:h-auto py-0 lg:py-[92px] min-h-none lg:min-h-[489px] px-10 md:px-9 transition‑all duration‑300 cursor-pointer transition-all  ${
            index < 1 ? 'w-full md:w-[50%]' : 'w-full md:w-[50%]'
          } ${item.href === 'residential' ? 'rounded-t-[15px] lg:rounded-l-[15px] lg:rounded-t-none' : ''} ${item.href === 'commercial' ? 'rounded-b-[15px] lg:rounded-r-[15px] lg:rounded-bl-none' : ''}`}
        >
            <img src={`/${item.image}.webp`} alt="Fondos de Galeria" width="3072" height="4096" class="absolute inset-0 w-full h-full object-cover -z-20 " loading="lazy" decoding="async"/>
            <div class="absolute inset-0 service-bg -z-10"></div>
            <div class="h-auto md:h-[143px] w-full flex justify-center items-center"> 
              <h3 class={`text-[20px] md:text-[24px] lg:text-[40px] font-semibold leading-[30px] lg:leading-[40px] text-center text-white transition-opacity duration-300 ${
                index < 0 ? 'md:opacity-0 md:group-hover:opacity-100' : ''
              }`}>
                {item.title}
              </h3>
            </div>
        </a>
      ))}
    </div>
  </div>
</section>
<script is:inline>
(() => {
  const container = document.getElementById('hover‑container');
  const [c1, c2] = [
    document.getElementById('col1'),
    document.getElementById('col2'),
  ];

  // función que resetea al estado inicial
  const reset = () => {
    c1.style.width = '50%';
    c2.style.width = '50%';

  };

  // media query para md (≥768px)
  const mql = window.matchMedia('(min-width: 768px)');

  // inicializa o deshabilita el hover según el ancho
  const setupHover = () => {
    // primero, quitamos posibles listeners previos
    c1.replaceWith(c1.cloneNode(true));
    c2.replaceWith(c2.cloneNode(true));


    // reobtenemos los nodos después del replace
    const [nc1, nc2] = [
      document.getElementById('col1'),
      document.getElementById('col2')
    ];

    if (mql.matches) {
      // solo en md+ aplicamos hover
      nc1.addEventListener('mouseenter', () => {
        nc1.style.width = '50%';
        nc2.style.width = '50%';
      });
      nc2.addEventListener('mouseenter', () => {
        nc1.style.width = '50%';
        nc2.style.width = '50%';
      });

      container.addEventListener('mouseleave', () => {
        nc1.style.width = '50%';
        nc2.style.width = '50%';
      });
      // y reseteamos para asegurar estado inicial
      reset();
    } else {
      // en <md devolvemos todo a full width
      nc1.style.width = '100%';
      nc2.style.width = '100%';
    }
  };

  // corre al cargar
  setupHover();
  // y cada vez que cambie el tamaño de pantalla
  mql.addEventListener('change', setupHover);
})();
</script>