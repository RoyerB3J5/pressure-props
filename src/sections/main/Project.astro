---
type Translations = typeof import('../../i18n/es').default;
type ProjectContent = Translations['main']['project'];
interface Props {
  content?: ProjectContent;
}
const { content } = Astro.props as Props;
const currentPath = Astro.url.pathname;
const match = currentPath.match(/^\/(en|es)/);
const lang = match ? match[1] : 'en';
---
<section class="pt-[112px] pb-[92px] md:py-[110.5px] flex flex-col lg:flex-row gap-8 lg:gap-4 justify-center items-center w-full max-w-screen md:max-w-none px-4 md:px-0 relative overflow-hidden">
  <img src={`/main/${content?.image}`} alt="Backgorunde de Projects" width="3001" height="1078" class="absolute inset-0 w-full h-full object-cover -z-20 object-[right_center] md:object-center" loading="lazy" decoding="async">
  <div class="order-2 lg:order-1 flex flex-col justify-center items-center gap-[32px] z-10">
    <div class="flex flex-col justify-center items-center gap-[20px] max-w-[537px] px-3 md:px-0">
      <h2 class="text-white font-semibold text-[28px] md:text-[40px] leading-[30px] md:leading-[46px] text-center ">{content?.title}</h2>
      <p  class="text-[16px] text-center font-medium leading-[18px] md:leading-[25px] text-white max-w-[389px]">{content?.description}</p>
      <p class="text-[16px] md:text-[15px] text-center font-medium leading-[18px] md:leading-[25px] text-white">{content?.text}</p>
    </div>
    <a class="cursor-pointer hover:-translate-y-1 transition-all ease-in-out duration-300 bg-secondary rounded-[10px] px-[38px] text-center text-white text-[16px] md:text-[18px] font-medium md:font-semibold leading-[16px] md:leading-[52px] h-[42px] md:h-auto flex items-center" href={`/${lang}/contact#info`}>
        {content?.button}
    </a>
  </div>
  <div class=" order-1 lg:order-2 overflow-hidden w-auto h-[130px] md:h-[220px] rounded-[15px] slide-hidden" id="car-container">
    <img src="/main/car.webp" alt="Carro Pressure Prop" width="2468" height="968" style="display: block; width: 100%; height: 100%; object-fit: cover;" class="w-auto h-[129px] md:w-[100%] md:h-[100%]" loading="lazy" decoding="async">
  </div>
</section>
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const car = document.getElementById('car-container');
    if (!car) return;
    let activated = false;
    let startScrollY = 0;
    // Callback del IntersectionObserver
    const onEntry = (entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !activated) {
          activated = true;
          startScrollY = window.scrollY;
          car.classList.add('slide-visible');
          observer.unobserve(car);
          initScrollTracking();
        }
      });
    };
    const observer = new IntersectionObserver(onEntry, {
      threshold: 0.5
    });
    observer.observe(car);
    observer.takeRecords(); 
    const onInitialScroll = () => {
      if (activated) return;
      const rect = car.getBoundingClientRect();
      if (rect.top <= window.innerHeight * 0.5) {
        activated = true;
        startScrollY = window.scrollY;
        car.classList.add('slide-visible');
        initScrollTracking();
      }
    };
    window.addEventListener('scroll', onInitialScroll);
    window.addEventListener('resize', onInitialScroll);
    onInitialScroll();
    function initScrollTracking() {
      observer.unobserve(car);
      window.removeEventListener('scroll', onInitialScroll);
      window.removeEventListener('resize', onInitialScroll);
      window.addEventListener('scroll', () => {
        const deltaY = window.scrollY - startScrollY;
        const factor = 0.4;
        const isLargeScreen = window.innerWidth >= 1024;
        
        let translateX = deltaY * factor;

        if (isLargeScreen && translateX < 0) {
          translateX = 0; 
        }
        
        car.style.transform = `translateX(${translateX}px)`;
      });
    }
  });
</script>
